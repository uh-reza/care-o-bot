/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_apps/cob_script_server/msg/ScriptGoal.msg */
#ifndef COB_SCRIPT_SERVER_MESSAGE_SCRIPTGOAL_H
#define COB_SCRIPT_SERVER_MESSAGE_SCRIPTGOAL_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace cob_script_server
{
template <class ContainerAllocator>
struct ScriptGoal_ : public ros::Message
{
  typedef ScriptGoal_<ContainerAllocator> Type;

  ScriptGoal_()
  : function_name()
  , component_name()
  , parameter_name()
  {
  }

  ScriptGoal_(const ContainerAllocator& _alloc)
  : function_name(_alloc)
  , component_name(_alloc)
  , parameter_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  function_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _component_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  component_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  parameter_name;


private:
  static const char* __s_getDataType_() { return "cob_script_server/ScriptGoal"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "af211056287b617497edc705175646e0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
string function_name\n\
string component_name\n\
string parameter_name\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, function_name);
    ros::serialization::serialize(stream, component_name);
    ros::serialization::serialize(stream, parameter_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, function_name);
    ros::serialization::deserialize(stream, component_name);
    ros::serialization::deserialize(stream, parameter_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(function_name);
    size += ros::serialization::serializationLength(component_name);
    size += ros::serialization::serializationLength(parameter_name);
    return size;
  }

  typedef boost::shared_ptr< ::cob_script_server::ScriptGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_script_server::ScriptGoal_<ContainerAllocator>  const> ConstPtr;
}; // struct ScriptGoal
typedef  ::cob_script_server::ScriptGoal_<std::allocator<void> > ScriptGoal;

typedef boost::shared_ptr< ::cob_script_server::ScriptGoal> ScriptGoalPtr;
typedef boost::shared_ptr< ::cob_script_server::ScriptGoal const> ScriptGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_script_server::ScriptGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_script_server::ScriptGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_script_server

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_script_server::ScriptGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af211056287b617497edc705175646e0";
  }

  static const char* value(const  ::cob_script_server::ScriptGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf211056287b6174ULL;
  static const uint64_t static_value2 = 0x97edc705175646e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_script_server::ScriptGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_script_server/ScriptGoal";
  }

  static const char* value(const  ::cob_script_server::ScriptGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_script_server::ScriptGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
string function_name\n\
string component_name\n\
string parameter_name\n\
\n\
";
  }

  static const char* value(const  ::cob_script_server::ScriptGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_script_server::ScriptGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.function_name);
    stream.next(m.component_name);
    stream.next(m.parameter_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ScriptGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_script_server::ScriptGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_script_server::ScriptGoal_<ContainerAllocator> & v) 
  {
    s << indent << "function_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function_name);
    s << indent << "component_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.component_name);
    s << indent << "parameter_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_name);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_SCRIPT_SERVER_MESSAGE_SCRIPTGOAL_H

