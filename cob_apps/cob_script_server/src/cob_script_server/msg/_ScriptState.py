"""autogenerated by genmsg_py from ScriptState.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class ScriptState(roslib.message.Message):
  _md5sum = "4981a5a5be8dbf926085d25a1acf43ca"
  _type = "cob_script_server/ScriptState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int16 number
string function_name
string component_name
string parameter_name
string full_graph_name

# Possible execution states
byte UNKNOWN=0
byte ACTIVE=1
byte SUCCEEDED=2
byte FAILED=3
byte PAUSED=4

byte state # state of execution
int16 error_code # current error_code for state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  # Pseudo-constants
  UNKNOWN = 0
  ACTIVE = 1
  SUCCEEDED = 2
  FAILED = 3
  PAUSED = 4

  __slots__ = ['header','number','function_name','component_name','parameter_name','full_graph_name','state','error_code']
  _slot_types = ['Header','int16','string','string','string','string','byte','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,number,function_name,component_name,parameter_name,full_graph_name,state,error_code
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ScriptState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.number is None:
        self.number = 0
      if self.function_name is None:
        self.function_name = ''
      if self.component_name is None:
        self.component_name = ''
      if self.parameter_name is None:
        self.parameter_name = ''
      if self.full_graph_name is None:
        self.full_graph_name = ''
      if self.state is None:
        self.state = 0
      if self.error_code is None:
        self.error_code = 0
    else:
      self.header = std_msgs.msg._Header.Header()
      self.number = 0
      self.function_name = ''
      self.component_name = ''
      self.parameter_name = ''
      self.full_graph_name = ''
      self.state = 0
      self.error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_h.pack(self.number))
      _x = self.function_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.component_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parameter_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.full_graph_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bh.pack(_x.state, _x.error_code))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.number,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.function_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.component_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.parameter_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.full_graph_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.state, _x.error_code,) = _struct_bh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_h.pack(self.number))
      _x = self.function_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.component_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parameter_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.full_graph_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bh.pack(_x.state, _x.error_code))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.number,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.function_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.component_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.parameter_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.full_graph_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.state, _x.error_code,) = _struct_bh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_h = struct.Struct("<h")
_struct_3I = struct.Struct("<3I")
_struct_bh = struct.Struct("<bh")
