"""autogenerated by genmsg_py from EmergencyStopState.msg. Do not edit."""
import roslib.message
import struct


class EmergencyStopState(roslib.message.Message):
  _md5sum = "d857d7312ffc16f75239036504e493e9"
  _type = "cob_relayboard/EmergencyStopState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message holds the emergency stop (EMStop) status of the robot. It detects wether an EMStop is caused by the safety laserscanner or the emergency stop buttons. Moreover, it gives signalizes wether the EMStop was confirmed (after Button press stop) and the system is free again.

# Possible EMStop States
int16 EMFREE = 0 		# system operatign normal
int16 EMSTOP = 1 		# emergency stop is active (Button pressed; obstacle in safety field of scanner)
int16 EMCONFIRMED = 2 	# emergency stop was confirmed system is reinitializing and going back to normal

bool emergency_button_stop	# true = emergency stop signal is issued by button pressed
bool scanner_stop			# true = emergency stop signal is issued by scanner
int16 emergency_state		# state (including confimation by key-switch), values see above


"""
  # Pseudo-constants
  EMFREE = 0
  EMSTOP = 1
  EMCONFIRMED = 2

  __slots__ = ['emergency_button_stop','scanner_stop','emergency_state']
  _slot_types = ['bool','bool','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       emergency_button_stop,scanner_stop,emergency_state
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(EmergencyStopState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.emergency_button_stop is None:
        self.emergency_button_stop = False
      if self.scanner_stop is None:
        self.scanner_stop = False
      if self.emergency_state is None:
        self.emergency_state = 0
    else:
      self.emergency_button_stop = False
      self.scanner_stop = False
      self.emergency_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2Bh.pack(_x.emergency_button_stop, _x.scanner_stop, _x.emergency_state))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.emergency_button_stop, _x.scanner_stop, _x.emergency_state,) = _struct_2Bh.unpack(str[start:end])
      self.emergency_button_stop = bool(self.emergency_button_stop)
      self.scanner_stop = bool(self.scanner_stop)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2Bh.pack(_x.emergency_button_stop, _x.scanner_stop, _x.emergency_state))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.emergency_button_stop, _x.scanner_stop, _x.emergency_state,) = _struct_2Bh.unpack(str[start:end])
      self.emergency_button_stop = bool(self.emergency_button_stop)
      self.scanner_stop = bool(self.scanner_stop)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2Bh = struct.Struct("<2Bh")
