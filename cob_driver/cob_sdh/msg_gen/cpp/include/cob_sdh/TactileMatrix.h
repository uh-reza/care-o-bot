/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_driver/cob_sdh/msg/TactileMatrix.msg */
#ifndef COB_SDH_MESSAGE_TACTILEMATRIX_H
#define COB_SDH_MESSAGE_TACTILEMATRIX_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace cob_sdh
{
template <class ContainerAllocator>
struct TactileMatrix_ : public ros::Message
{
  typedef TactileMatrix_<ContainerAllocator> Type;

  TactileMatrix_()
  : matrix_id(0)
  , cells_x(0)
  , cells_y(0)
  , tactile_array()
  {
  }

  TactileMatrix_(const ContainerAllocator& _alloc)
  : matrix_id(0)
  , cells_x(0)
  , cells_y(0)
  , tactile_array(_alloc)
  {
  }

  typedef uint32_t _matrix_id_type;
  uint32_t matrix_id;

  typedef int16_t _cells_x_type;
  int16_t cells_x;

  typedef int16_t _cells_y_type;
  int16_t cells_y;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _tactile_array_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  tactile_array;


  ROS_DEPRECATED uint32_t get_tactile_array_size() const { return (uint32_t)tactile_array.size(); }
  ROS_DEPRECATED void set_tactile_array_size(uint32_t size) { tactile_array.resize((size_t)size); }
  ROS_DEPRECATED void get_tactile_array_vec(std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other > & vec) const { vec = this->tactile_array; }
  ROS_DEPRECATED void set_tactile_array_vec(const std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other > & vec) { this->tactile_array = vec; }
private:
  static const char* __s_getDataType_() { return "cob_sdh/TactileMatrix"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ab718b6c1d4d719110707994d2e325e4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint32 matrix_id\n\
int16 cells_x\n\
int16 cells_y\n\
int16[] tactile_array\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, matrix_id);
    ros::serialization::serialize(stream, cells_x);
    ros::serialization::serialize(stream, cells_y);
    ros::serialization::serialize(stream, tactile_array);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, matrix_id);
    ros::serialization::deserialize(stream, cells_x);
    ros::serialization::deserialize(stream, cells_y);
    ros::serialization::deserialize(stream, tactile_array);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(matrix_id);
    size += ros::serialization::serializationLength(cells_x);
    size += ros::serialization::serializationLength(cells_y);
    size += ros::serialization::serializationLength(tactile_array);
    return size;
  }

  typedef boost::shared_ptr< ::cob_sdh::TactileMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_sdh::TactileMatrix_<ContainerAllocator>  const> ConstPtr;
}; // struct TactileMatrix
typedef  ::cob_sdh::TactileMatrix_<std::allocator<void> > TactileMatrix;

typedef boost::shared_ptr< ::cob_sdh::TactileMatrix> TactileMatrixPtr;
typedef boost::shared_ptr< ::cob_sdh::TactileMatrix const> TactileMatrixConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_sdh::TactileMatrix_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_sdh::TactileMatrix_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_sdh

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_sdh::TactileMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab718b6c1d4d719110707994d2e325e4";
  }

  static const char* value(const  ::cob_sdh::TactileMatrix_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xab718b6c1d4d7191ULL;
  static const uint64_t static_value2 = 0x10707994d2e325e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_sdh::TactileMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_sdh/TactileMatrix";
  }

  static const char* value(const  ::cob_sdh::TactileMatrix_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_sdh::TactileMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 matrix_id\n\
int16 cells_x\n\
int16 cells_y\n\
int16[] tactile_array\n\
\n\
";
  }

  static const char* value(const  ::cob_sdh::TactileMatrix_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_sdh::TactileMatrix_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.matrix_id);
    stream.next(m.cells_x);
    stream.next(m.cells_y);
    stream.next(m.tactile_array);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TactileMatrix_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_sdh::TactileMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_sdh::TactileMatrix_<ContainerAllocator> & v) 
  {
    s << indent << "matrix_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.matrix_id);
    s << indent << "cells_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cells_x);
    s << indent << "cells_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cells_y);
    s << indent << "tactile_array[]" << std::endl;
    for (size_t i = 0; i < v.tactile_array.size(); ++i)
    {
      s << indent << "  tactile_array[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.tactile_array[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_SDH_MESSAGE_TACTILEMATRIX_H

