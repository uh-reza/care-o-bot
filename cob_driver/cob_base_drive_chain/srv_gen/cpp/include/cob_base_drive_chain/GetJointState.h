/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_driver/cob_base_drive_chain/srv/GetJointState.srv */
#ifndef COB_BASE_DRIVE_CHAIN_SERVICE_GETJOINTSTATE_H
#define COB_BASE_DRIVE_CHAIN_SERVICE_GETJOINTSTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "sensor_msgs/JointState.h"

namespace cob_base_drive_chain
{
template <class ContainerAllocator>
struct GetJointStateRequest_ : public ros::Message
{
  typedef GetJointStateRequest_<ContainerAllocator> Type;

  GetJointStateRequest_()
  {
  }

  GetJointStateRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "cob_base_drive_chain/GetJointStateRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a4eea410e374809eb9cf3036acbb3c94"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetJointStateRequest
typedef  ::cob_base_drive_chain::GetJointStateRequest_<std::allocator<void> > GetJointStateRequest;

typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateRequest> GetJointStateRequestPtr;
typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateRequest const> GetJointStateRequestConstPtr;


template <class ContainerAllocator>
struct GetJointStateResponse_ : public ros::Message
{
  typedef GetJointStateResponse_<ContainerAllocator> Type;

  GetJointStateResponse_()
  : jointstate()
  {
  }

  GetJointStateResponse_(const ContainerAllocator& _alloc)
  : jointstate(_alloc)
  {
  }

  typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _jointstate_type;
   ::sensor_msgs::JointState_<ContainerAllocator>  jointstate;


private:
  static const char* __s_getDataType_() { return "cob_base_drive_chain/GetJointStateResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a4eea410e374809eb9cf3036acbb3c94"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a4eea410e374809eb9cf3036acbb3c94"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "sensor_msgs/JointState jointstate\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, jointstate);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, jointstate);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(jointstate);
    return size;
  }

  typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetJointStateResponse
typedef  ::cob_base_drive_chain::GetJointStateResponse_<std::allocator<void> > GetJointStateResponse;

typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateResponse> GetJointStateResponsePtr;
typedef boost::shared_ptr< ::cob_base_drive_chain::GetJointStateResponse const> GetJointStateResponseConstPtr;

struct GetJointState
{

typedef GetJointStateRequest Request;
typedef GetJointStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetJointState
} // namespace cob_base_drive_chain

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_base_drive_chain/GetJointStateRequest";
  }

  static const char* value(const  ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4eea410e374809eb9cf3036acbb3c94";
  }

  static const char* value(const  ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa4eea410e374809eULL;
  static const uint64_t static_value2 = 0xb9cf3036acbb3c94ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_base_drive_chain/GetJointStateResponse";
  }

  static const char* value(const  ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/JointState jointstate\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetJointStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jointstate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetJointStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_base_drive_chain::GetJointState> {
  static const char* value() 
  {
    return "a4eea410e374809eb9cf3036acbb3c94";
  }

  static const char* value(const cob_base_drive_chain::GetJointState&) { return value(); } 
};

template<>
struct DataType<cob_base_drive_chain::GetJointState> {
  static const char* value() 
  {
    return "cob_base_drive_chain/GetJointState";
  }

  static const char* value(const cob_base_drive_chain::GetJointState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4eea410e374809eb9cf3036acbb3c94";
  }

  static const char* value(const cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_base_drive_chain/GetJointState";
  }

  static const char* value(const cob_base_drive_chain::GetJointStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4eea410e374809eb9cf3036acbb3c94";
  }

  static const char* value(const cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_base_drive_chain/GetJointState";
  }

  static const char* value(const cob_base_drive_chain::GetJointStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_BASE_DRIVE_CHAIN_SERVICE_GETJOINTSTATE_H

