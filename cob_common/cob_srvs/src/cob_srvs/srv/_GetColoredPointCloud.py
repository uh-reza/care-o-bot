"""autogenerated by genmsg_py from GetColoredPointCloudRequest.msg. Do not edit."""
import roslib.message
import struct


class GetColoredPointCloudRequest(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "cob_srvs/GetColoredPointCloudRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetColoredPointCloudRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from GetColoredPointCloudResponse.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg
import sensor_msgs.msg

class GetColoredPointCloudResponse(roslib.message.Message):
  _md5sum = "cf3355f2241f2ad04bcf295859caf912"
  _type = "cob_srvs/GetColoredPointCloudResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sensor_msgs/Image colorImage
sensor_msgs/Image xyzImage
sensor_msgs/Image confidenceMask



float64[9] reprojectionMatrix


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['colorImage','xyzImage','confidenceMask','reprojectionMatrix']
  _slot_types = ['sensor_msgs/Image','sensor_msgs/Image','sensor_msgs/Image','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       colorImage,xyzImage,confidenceMask,reprojectionMatrix
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetColoredPointCloudResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.colorImage is None:
        self.colorImage = sensor_msgs.msg.Image()
      if self.xyzImage is None:
        self.xyzImage = sensor_msgs.msg.Image()
      if self.confidenceMask is None:
        self.confidenceMask = sensor_msgs.msg.Image()
      if self.reprojectionMatrix is None:
        self.reprojectionMatrix = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.colorImage = sensor_msgs.msg.Image()
      self.xyzImage = sensor_msgs.msg.Image()
      self.confidenceMask = sensor_msgs.msg.Image()
      self.reprojectionMatrix = [0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.colorImage.header.seq, _x.colorImage.header.stamp.secs, _x.colorImage.header.stamp.nsecs))
      _x = self.colorImage.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.colorImage.height, _x.colorImage.width))
      _x = self.colorImage.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.colorImage.is_bigendian, _x.colorImage.step))
      _x = self.colorImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.xyzImage.header.seq, _x.xyzImage.header.stamp.secs, _x.xyzImage.header.stamp.nsecs))
      _x = self.xyzImage.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.xyzImage.height, _x.xyzImage.width))
      _x = self.xyzImage.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.xyzImage.is_bigendian, _x.xyzImage.step))
      _x = self.xyzImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.confidenceMask.header.seq, _x.confidenceMask.header.stamp.secs, _x.confidenceMask.header.stamp.nsecs))
      _x = self.confidenceMask.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.confidenceMask.height, _x.confidenceMask.width))
      _x = self.confidenceMask.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.confidenceMask.is_bigendian, _x.confidenceMask.step))
      _x = self.confidenceMask.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_9d.pack(*self.reprojectionMatrix))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.colorImage is None:
        self.colorImage = sensor_msgs.msg.Image()
      if self.xyzImage is None:
        self.xyzImage = sensor_msgs.msg.Image()
      if self.confidenceMask is None:
        self.confidenceMask = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.colorImage.header.seq, _x.colorImage.header.stamp.secs, _x.colorImage.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.colorImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.colorImage.height, _x.colorImage.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.colorImage.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.colorImage.is_bigendian, _x.colorImage.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.colorImage.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.xyzImage.header.seq, _x.xyzImage.header.stamp.secs, _x.xyzImage.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xyzImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.xyzImage.height, _x.xyzImage.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xyzImage.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.xyzImage.is_bigendian, _x.xyzImage.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xyzImage.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.confidenceMask.header.seq, _x.confidenceMask.header.stamp.secs, _x.confidenceMask.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.confidenceMask.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.confidenceMask.height, _x.confidenceMask.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.confidenceMask.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.confidenceMask.is_bigendian, _x.confidenceMask.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.confidenceMask.data = str[start:end]
      start = end
      end += 72
      self.reprojectionMatrix = _struct_9d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.colorImage.header.seq, _x.colorImage.header.stamp.secs, _x.colorImage.header.stamp.nsecs))
      _x = self.colorImage.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.colorImage.height, _x.colorImage.width))
      _x = self.colorImage.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.colorImage.is_bigendian, _x.colorImage.step))
      _x = self.colorImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.xyzImage.header.seq, _x.xyzImage.header.stamp.secs, _x.xyzImage.header.stamp.nsecs))
      _x = self.xyzImage.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.xyzImage.height, _x.xyzImage.width))
      _x = self.xyzImage.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.xyzImage.is_bigendian, _x.xyzImage.step))
      _x = self.xyzImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.confidenceMask.header.seq, _x.confidenceMask.header.stamp.secs, _x.confidenceMask.header.stamp.nsecs))
      _x = self.confidenceMask.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.confidenceMask.height, _x.confidenceMask.width))
      _x = self.confidenceMask.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.confidenceMask.is_bigendian, _x.confidenceMask.step))
      _x = self.confidenceMask.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.reprojectionMatrix.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.colorImage is None:
        self.colorImage = sensor_msgs.msg.Image()
      if self.xyzImage is None:
        self.xyzImage = sensor_msgs.msg.Image()
      if self.confidenceMask is None:
        self.confidenceMask = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.colorImage.header.seq, _x.colorImage.header.stamp.secs, _x.colorImage.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.colorImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.colorImage.height, _x.colorImage.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.colorImage.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.colorImage.is_bigendian, _x.colorImage.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.colorImage.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.xyzImage.header.seq, _x.xyzImage.header.stamp.secs, _x.xyzImage.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xyzImage.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.xyzImage.height, _x.xyzImage.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xyzImage.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.xyzImage.is_bigendian, _x.xyzImage.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xyzImage.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.confidenceMask.header.seq, _x.confidenceMask.header.stamp.secs, _x.confidenceMask.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.confidenceMask.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.confidenceMask.height, _x.confidenceMask.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.confidenceMask.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.confidenceMask.is_bigendian, _x.confidenceMask.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.confidenceMask.data = str[start:end]
      start = end
      end += 72
      self.reprojectionMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_9d = struct.Struct("<9d")
_struct_2I = struct.Struct("<2I")
_struct_BI = struct.Struct("<BI")
class GetColoredPointCloud(roslib.message.ServiceDefinition):
  _type          = 'cob_srvs/GetColoredPointCloud'
  _md5sum = 'cf3355f2241f2ad04bcf295859caf912'
  _request_class  = GetColoredPointCloudRequest
  _response_class = GetColoredPointCloudResponse
