/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_srvs/srv/AcquireCalibrationImages.srv */
#ifndef COB_SRVS_SERVICE_ACQUIRECALIBRATIONIMAGES_H
#define COB_SRVS_SERVICE_ACQUIRECALIBRATIONIMAGES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace cob_srvs
{
template <class ContainerAllocator>
struct AcquireCalibrationImagesRequest_ : public ros::Message
{
  typedef AcquireCalibrationImagesRequest_<ContainerAllocator> Type;

  AcquireCalibrationImagesRequest_()
  : reset_image_counter(false)
  {
  }

  AcquireCalibrationImagesRequest_(const ContainerAllocator& _alloc)
  : reset_image_counter(false)
  {
  }

  typedef uint8_t _reset_image_counter_type;
  uint8_t reset_image_counter;


private:
  static const char* __s_getDataType_() { return "cob_srvs/AcquireCalibrationImagesRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e169cf33c98571b589b34472dd844790"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "e169cf33c98571b589b34472dd844790"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool reset_image_counter\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, reset_image_counter);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, reset_image_counter);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(reset_image_counter);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AcquireCalibrationImagesRequest
typedef  ::cob_srvs::AcquireCalibrationImagesRequest_<std::allocator<void> > AcquireCalibrationImagesRequest;

typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesRequest> AcquireCalibrationImagesRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesRequest const> AcquireCalibrationImagesRequestConstPtr;


template <class ContainerAllocator>
struct AcquireCalibrationImagesResponse_ : public ros::Message
{
  typedef AcquireCalibrationImagesResponse_<ContainerAllocator> Type;

  AcquireCalibrationImagesResponse_()
  {
  }

  AcquireCalibrationImagesResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "cob_srvs/AcquireCalibrationImagesResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "e169cf33c98571b589b34472dd844790"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AcquireCalibrationImagesResponse
typedef  ::cob_srvs::AcquireCalibrationImagesResponse_<std::allocator<void> > AcquireCalibrationImagesResponse;

typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesResponse> AcquireCalibrationImagesResponsePtr;
typedef boost::shared_ptr< ::cob_srvs::AcquireCalibrationImagesResponse const> AcquireCalibrationImagesResponseConstPtr;

struct AcquireCalibrationImages
{

typedef AcquireCalibrationImagesRequest Request;
typedef AcquireCalibrationImagesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AcquireCalibrationImages
} // namespace cob_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e169cf33c98571b589b34472dd844790";
  }

  static const char* value(const  ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe169cf33c98571b5ULL;
  static const uint64_t static_value2 = 0x89b34472dd844790ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/AcquireCalibrationImagesRequest";
  }

  static const char* value(const  ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool reset_image_counter\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/AcquireCalibrationImagesResponse";
  }

  static const char* value(const  ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.reset_image_counter);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AcquireCalibrationImagesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AcquireCalibrationImagesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_srvs::AcquireCalibrationImages> {
  static const char* value() 
  {
    return "e169cf33c98571b589b34472dd844790";
  }

  static const char* value(const cob_srvs::AcquireCalibrationImages&) { return value(); } 
};

template<>
struct DataType<cob_srvs::AcquireCalibrationImages> {
  static const char* value() 
  {
    return "cob_srvs/AcquireCalibrationImages";
  }

  static const char* value(const cob_srvs::AcquireCalibrationImages&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e169cf33c98571b589b34472dd844790";
  }

  static const char* value(const cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/AcquireCalibrationImages";
  }

  static const char* value(const cob_srvs::AcquireCalibrationImagesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e169cf33c98571b589b34472dd844790";
  }

  static const char* value(const cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/AcquireCalibrationImages";
  }

  static const char* value(const cob_srvs::AcquireCalibrationImagesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_SRVS_SERVICE_ACQUIRECALIBRATIONIMAGES_H

