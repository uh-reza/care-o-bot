/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_srvs/srv/SetJointTrajectory.srv */
#ifndef COB_SRVS_SERVICE_SETJOINTTRAJECTORY_H
#define COB_SRVS_SERVICE_SETJOINTTRAJECTORY_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "trajectory_msgs/JointTrajectory.h"


#include "std_msgs/String.h"

namespace cob_srvs
{
template <class ContainerAllocator>
struct SetJointTrajectoryRequest_ : public ros::Message
{
  typedef SetJointTrajectoryRequest_<ContainerAllocator> Type;

  SetJointTrajectoryRequest_()
  : trajectory()
  {
  }

  SetJointTrajectoryRequest_(const ContainerAllocator& _alloc)
  : trajectory(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
   ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  trajectory;


private:
  static const char* __s_getDataType_() { return "cob_srvs/SetJointTrajectoryRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "48a668811b715b51af6b3383511ae27f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "09ae52e52b4c7dae8badb976ba693ba3"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, trajectory);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, trajectory);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(trajectory);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SetJointTrajectoryRequest
typedef  ::cob_srvs::SetJointTrajectoryRequest_<std::allocator<void> > SetJointTrajectoryRequest;

typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryRequest> SetJointTrajectoryRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryRequest const> SetJointTrajectoryRequestConstPtr;


template <class ContainerAllocator>
struct SetJointTrajectoryResponse_ : public ros::Message
{
  typedef SetJointTrajectoryResponse_<ContainerAllocator> Type;

  SetJointTrajectoryResponse_()
  : success(0)
  , errorMessage()
  {
  }

  SetJointTrajectoryResponse_(const ContainerAllocator& _alloc)
  : success(0)
  , errorMessage(_alloc)
  {
  }

  typedef int64_t _success_type;
  int64_t success;

  typedef  ::std_msgs::String_<ContainerAllocator>  _errorMessage_type;
   ::std_msgs::String_<ContainerAllocator>  errorMessage;


private:
  static const char* __s_getDataType_() { return "cob_srvs/SetJointTrajectoryResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fff2fd61c570b3016de5f27e6dc433be"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "09ae52e52b4c7dae8badb976ba693ba3"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 success\n\
std_msgs/String errorMessage\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, errorMessage);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, errorMessage);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(errorMessage);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SetJointTrajectoryResponse
typedef  ::cob_srvs::SetJointTrajectoryResponse_<std::allocator<void> > SetJointTrajectoryResponse;

typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryResponse> SetJointTrajectoryResponsePtr;
typedef boost::shared_ptr< ::cob_srvs::SetJointTrajectoryResponse const> SetJointTrajectoryResponseConstPtr;

struct SetJointTrajectory
{

typedef SetJointTrajectoryRequest Request;
typedef SetJointTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetJointTrajectory
} // namespace cob_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48a668811b715b51af6b3383511ae27f";
  }

  static const char* value(const  ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x48a668811b715b51ULL;
  static const uint64_t static_value2 = 0xaf6b3383511ae27fULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/SetJointTrajectoryRequest";
  }

  static const char* value(const  ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fff2fd61c570b3016de5f27e6dc433be";
  }

  static const char* value(const  ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfff2fd61c570b301ULL;
  static const uint64_t static_value2 = 0x6de5f27e6dc433beULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/SetJointTrajectoryResponse";
  }

  static const char* value(const  ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 success\n\
std_msgs/String errorMessage\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectory);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetJointTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.errorMessage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetJointTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_srvs::SetJointTrajectory> {
  static const char* value() 
  {
    return "09ae52e52b4c7dae8badb976ba693ba3";
  }

  static const char* value(const cob_srvs::SetJointTrajectory&) { return value(); } 
};

template<>
struct DataType<cob_srvs::SetJointTrajectory> {
  static const char* value() 
  {
    return "cob_srvs/SetJointTrajectory";
  }

  static const char* value(const cob_srvs::SetJointTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09ae52e52b4c7dae8badb976ba693ba3";
  }

  static const char* value(const cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/SetJointTrajectory";
  }

  static const char* value(const cob_srvs::SetJointTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09ae52e52b4c7dae8badb976ba693ba3";
  }

  static const char* value(const cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/SetJointTrajectory";
  }

  static const char* value(const cob_srvs::SetJointTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_SRVS_SERVICE_SETJOINTTRAJECTORY_H

