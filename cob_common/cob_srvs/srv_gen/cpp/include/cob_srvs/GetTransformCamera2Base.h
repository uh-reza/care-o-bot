/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_srvs/srv/GetTransformCamera2Base.srv */
#ifndef COB_SRVS_SERVICE_GETTRANSFORMCAMERA2BASE_H
#define COB_SRVS_SERVICE_GETTRANSFORMCAMERA2BASE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "cob_msgs/Transformation.h"

namespace cob_srvs
{
template <class ContainerAllocator>
struct GetTransformCamera2BaseRequest_ : public ros::Message
{
  typedef GetTransformCamera2BaseRequest_<ContainerAllocator> Type;

  GetTransformCamera2BaseRequest_()
  {
  }

  GetTransformCamera2BaseRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "cob_srvs/GetTransformCamera2BaseRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8316a0598b4d0c36e9a64cce2457d6c4"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetTransformCamera2BaseRequest
typedef  ::cob_srvs::GetTransformCamera2BaseRequest_<std::allocator<void> > GetTransformCamera2BaseRequest;

typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseRequest> GetTransformCamera2BaseRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseRequest const> GetTransformCamera2BaseRequestConstPtr;


template <class ContainerAllocator>
struct GetTransformCamera2BaseResponse_ : public ros::Message
{
  typedef GetTransformCamera2BaseResponse_<ContainerAllocator> Type;

  GetTransformCamera2BaseResponse_()
  : transformation()
  {
  }

  GetTransformCamera2BaseResponse_(const ContainerAllocator& _alloc)
  : transformation(_alloc)
  {
  }

  typedef  ::cob_msgs::Transformation_<ContainerAllocator>  _transformation_type;
   ::cob_msgs::Transformation_<ContainerAllocator>  transformation;


private:
  static const char* __s_getDataType_() { return "cob_srvs/GetTransformCamera2BaseResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8316a0598b4d0c36e9a64cce2457d6c4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8316a0598b4d0c36e9a64cce2457d6c4"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "cob_msgs/Transformation transformation\n\
\n\
\n\
================================================================================\n\
MSG: cob_msgs/Transformation\n\
#message for exchanging transformations in x,y,z positions and roll, pitch, yaw angles\n\
\n\
#std_msgs/Header header\n\
\n\
#translation\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
#rotation\n\
float64 roll #roll\n\
float64 pitch #pitch\n\
float64 yaw #yaw\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, transformation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, transformation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(transformation);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetTransformCamera2BaseResponse
typedef  ::cob_srvs::GetTransformCamera2BaseResponse_<std::allocator<void> > GetTransformCamera2BaseResponse;

typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseResponse> GetTransformCamera2BaseResponsePtr;
typedef boost::shared_ptr< ::cob_srvs::GetTransformCamera2BaseResponse const> GetTransformCamera2BaseResponseConstPtr;

struct GetTransformCamera2Base
{

typedef GetTransformCamera2BaseRequest Request;
typedef GetTransformCamera2BaseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetTransformCamera2Base
} // namespace cob_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/GetTransformCamera2BaseRequest";
  }

  static const char* value(const  ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8316a0598b4d0c36e9a64cce2457d6c4";
  }

  static const char* value(const  ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8316a0598b4d0c36ULL;
  static const uint64_t static_value2 = 0xe9a64cce2457d6c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/GetTransformCamera2BaseResponse";
  }

  static const char* value(const  ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_msgs/Transformation transformation\n\
\n\
\n\
================================================================================\n\
MSG: cob_msgs/Transformation\n\
#message for exchanging transformations in x,y,z positions and roll, pitch, yaw angles\n\
\n\
#std_msgs/Header header\n\
\n\
#translation\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
#rotation\n\
float64 roll #roll\n\
float64 pitch #pitch\n\
float64 yaw #yaw\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTransformCamera2BaseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.transformation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTransformCamera2BaseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_srvs::GetTransformCamera2Base> {
  static const char* value() 
  {
    return "8316a0598b4d0c36e9a64cce2457d6c4";
  }

  static const char* value(const cob_srvs::GetTransformCamera2Base&) { return value(); } 
};

template<>
struct DataType<cob_srvs::GetTransformCamera2Base> {
  static const char* value() 
  {
    return "cob_srvs/GetTransformCamera2Base";
  }

  static const char* value(const cob_srvs::GetTransformCamera2Base&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8316a0598b4d0c36e9a64cce2457d6c4";
  }

  static const char* value(const cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/GetTransformCamera2Base";
  }

  static const char* value(const cob_srvs::GetTransformCamera2BaseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8316a0598b4d0c36e9a64cce2457d6c4";
  }

  static const char* value(const cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/GetTransformCamera2Base";
  }

  static const char* value(const cob_srvs::GetTransformCamera2BaseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_SRVS_SERVICE_GETTRANSFORMCAMERA2BASE_H

