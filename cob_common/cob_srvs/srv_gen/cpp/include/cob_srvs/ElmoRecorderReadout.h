/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_srvs/srv/ElmoRecorderReadout.srv */
#ifndef COB_SRVS_SERVICE_ELMORECORDERREADOUT_H
#define COB_SRVS_SERVICE_ELMORECORDERREADOUT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace cob_srvs
{
template <class ContainerAllocator>
struct ElmoRecorderReadoutRequest_ : public ros::Message
{
  typedef ElmoRecorderReadoutRequest_<ContainerAllocator> Type;

  ElmoRecorderReadoutRequest_()
  : subindex(0)
  , fileprefix()
  {
  }

  ElmoRecorderReadoutRequest_(const ContainerAllocator& _alloc)
  : subindex(0)
  , fileprefix(_alloc)
  {
  }

  typedef int64_t _subindex_type;
  int64_t subindex;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileprefix_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  fileprefix;


private:
  static const char* __s_getDataType_() { return "cob_srvs/ElmoRecorderReadoutRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "dd88752641c6995eb674ed67be4e41d1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "58d03a96e0b56a380d625c18335fb081"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
int64 subindex\n\
\n\
\n\
\n\
string fileprefix\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, subindex);
    ros::serialization::serialize(stream, fileprefix);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, subindex);
    ros::serialization::deserialize(stream, fileprefix);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(subindex);
    size += ros::serialization::serializationLength(fileprefix);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ElmoRecorderReadoutRequest
typedef  ::cob_srvs::ElmoRecorderReadoutRequest_<std::allocator<void> > ElmoRecorderReadoutRequest;

typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutRequest> ElmoRecorderReadoutRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutRequest const> ElmoRecorderReadoutRequestConstPtr;


template <class ContainerAllocator>
struct ElmoRecorderReadoutResponse_ : public ros::Message
{
  typedef ElmoRecorderReadoutResponse_<ContainerAllocator> Type;

  ElmoRecorderReadoutResponse_()
  : success(0)
  , message()
  {
  }

  ElmoRecorderReadoutResponse_(const ContainerAllocator& _alloc)
  : success(0)
  , message(_alloc)
  {
  }

  typedef int64_t _success_type;
  int64_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message;


private:
  static const char* __s_getDataType_() { return "cob_srvs/ElmoRecorderReadoutResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a223a80848aece692f82aeb7f4a04f7f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "58d03a96e0b56a380d625c18335fb081"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
\n\
\n\
\n\
int64 success\n\
\n\
string message\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, message);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, message);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(message);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ElmoRecorderReadoutResponse
typedef  ::cob_srvs::ElmoRecorderReadoutResponse_<std::allocator<void> > ElmoRecorderReadoutResponse;

typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutResponse> ElmoRecorderReadoutResponsePtr;
typedef boost::shared_ptr< ::cob_srvs::ElmoRecorderReadoutResponse const> ElmoRecorderReadoutResponseConstPtr;

struct ElmoRecorderReadout
{

typedef ElmoRecorderReadoutRequest Request;
typedef ElmoRecorderReadoutResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ElmoRecorderReadout
} // namespace cob_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd88752641c6995eb674ed67be4e41d1";
  }

  static const char* value(const  ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdd88752641c6995eULL;
  static const uint64_t static_value2 = 0xb674ed67be4e41d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/ElmoRecorderReadoutRequest";
  }

  static const char* value(const  ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
int64 subindex\n\
\n\
\n\
\n\
string fileprefix\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a223a80848aece692f82aeb7f4a04f7f";
  }

  static const char* value(const  ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa223a80848aece69ULL;
  static const uint64_t static_value2 = 0x2f82aeb7f4a04f7fULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/ElmoRecorderReadoutResponse";
  }

  static const char* value(const  ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
int64 success\n\
\n\
string message\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.subindex);
    stream.next(m.fileprefix);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ElmoRecorderReadoutRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ElmoRecorderReadoutResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_srvs::ElmoRecorderReadout> {
  static const char* value() 
  {
    return "58d03a96e0b56a380d625c18335fb081";
  }

  static const char* value(const cob_srvs::ElmoRecorderReadout&) { return value(); } 
};

template<>
struct DataType<cob_srvs::ElmoRecorderReadout> {
  static const char* value() 
  {
    return "cob_srvs/ElmoRecorderReadout";
  }

  static const char* value(const cob_srvs::ElmoRecorderReadout&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58d03a96e0b56a380d625c18335fb081";
  }

  static const char* value(const cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/ElmoRecorderReadout";
  }

  static const char* value(const cob_srvs::ElmoRecorderReadoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58d03a96e0b56a380d625c18335fb081";
  }

  static const char* value(const cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/ElmoRecorderReadout";
  }

  static const char* value(const cob_srvs::ElmoRecorderReadoutResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_SRVS_SERVICE_ELMORECORDERREADOUT_H

