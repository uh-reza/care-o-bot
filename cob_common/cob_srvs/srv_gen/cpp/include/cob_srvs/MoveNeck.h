/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_srvs/srv/MoveNeck.srv */
#ifndef COB_SRVS_SERVICE_MOVENECK_H
#define COB_SRVS_SERVICE_MOVENECK_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "std_msgs/String.h"

namespace cob_srvs
{
template <class ContainerAllocator>
struct MoveNeckRequest_ : public ros::Message
{
  typedef MoveNeckRequest_<ContainerAllocator> Type;

  MoveNeckRequest_()
  : joint_angle_1(0.0)
  , joint_angle_2(0.0)
  , joint_angle_3(0.0)
  , joint_angle_4(0.0)
  {
  }

  MoveNeckRequest_(const ContainerAllocator& _alloc)
  : joint_angle_1(0.0)
  , joint_angle_2(0.0)
  , joint_angle_3(0.0)
  , joint_angle_4(0.0)
  {
  }

  typedef float _joint_angle_1_type;
  float joint_angle_1;

  typedef float _joint_angle_2_type;
  float joint_angle_2;

  typedef float _joint_angle_3_type;
  float joint_angle_3;

  typedef float _joint_angle_4_type;
  float joint_angle_4;


private:
  static const char* __s_getDataType_() { return "cob_srvs/MoveNeckRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b0e7ec4179e43c1e83359d2cf0c44885"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "718a31b14e9cb510862ca312064f3b28"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 joint_angle_1\n\
float32 joint_angle_2\n\
float32 joint_angle_3\n\
float32 joint_angle_4\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, joint_angle_1);
    ros::serialization::serialize(stream, joint_angle_2);
    ros::serialization::serialize(stream, joint_angle_3);
    ros::serialization::serialize(stream, joint_angle_4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, joint_angle_1);
    ros::serialization::deserialize(stream, joint_angle_2);
    ros::serialization::deserialize(stream, joint_angle_3);
    ros::serialization::deserialize(stream, joint_angle_4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(joint_angle_1);
    size += ros::serialization::serializationLength(joint_angle_2);
    size += ros::serialization::serializationLength(joint_angle_3);
    size += ros::serialization::serializationLength(joint_angle_4);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::MoveNeckRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::MoveNeckRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveNeckRequest
typedef  ::cob_srvs::MoveNeckRequest_<std::allocator<void> > MoveNeckRequest;

typedef boost::shared_ptr< ::cob_srvs::MoveNeckRequest> MoveNeckRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::MoveNeckRequest const> MoveNeckRequestConstPtr;


template <class ContainerAllocator>
struct MoveNeckResponse_ : public ros::Message
{
  typedef MoveNeckResponse_<ContainerAllocator> Type;

  MoveNeckResponse_()
  : success(0)
  , errorMessage()
  {
  }

  MoveNeckResponse_(const ContainerAllocator& _alloc)
  : success(0)
  , errorMessage(_alloc)
  {
  }

  typedef int64_t _success_type;
  int64_t success;

  typedef  ::std_msgs::String_<ContainerAllocator>  _errorMessage_type;
   ::std_msgs::String_<ContainerAllocator>  errorMessage;


private:
  static const char* __s_getDataType_() { return "cob_srvs/MoveNeckResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fff2fd61c570b3016de5f27e6dc433be"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "718a31b14e9cb510862ca312064f3b28"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 success\n\
std_msgs/String errorMessage\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, errorMessage);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, errorMessage);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(errorMessage);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::MoveNeckResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::MoveNeckResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveNeckResponse
typedef  ::cob_srvs::MoveNeckResponse_<std::allocator<void> > MoveNeckResponse;

typedef boost::shared_ptr< ::cob_srvs::MoveNeckResponse> MoveNeckResponsePtr;
typedef boost::shared_ptr< ::cob_srvs::MoveNeckResponse const> MoveNeckResponseConstPtr;

struct MoveNeck
{

typedef MoveNeckRequest Request;
typedef MoveNeckResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveNeck
} // namespace cob_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::MoveNeckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0e7ec4179e43c1e83359d2cf0c44885";
  }

  static const char* value(const  ::cob_srvs::MoveNeckRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb0e7ec4179e43c1eULL;
  static const uint64_t static_value2 = 0x83359d2cf0c44885ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::MoveNeckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveNeckRequest";
  }

  static const char* value(const  ::cob_srvs::MoveNeckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::MoveNeckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 joint_angle_1\n\
float32 joint_angle_2\n\
float32 joint_angle_3\n\
float32 joint_angle_4\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::MoveNeckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_srvs::MoveNeckRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::MoveNeckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fff2fd61c570b3016de5f27e6dc433be";
  }

  static const char* value(const  ::cob_srvs::MoveNeckResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfff2fd61c570b301ULL;
  static const uint64_t static_value2 = 0x6de5f27e6dc433beULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::MoveNeckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveNeckResponse";
  }

  static const char* value(const  ::cob_srvs::MoveNeckResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::MoveNeckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 success\n\
std_msgs/String errorMessage\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::MoveNeckResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::MoveNeckRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_angle_1);
    stream.next(m.joint_angle_2);
    stream.next(m.joint_angle_3);
    stream.next(m.joint_angle_4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveNeckRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::MoveNeckResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.errorMessage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveNeckResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_srvs::MoveNeck> {
  static const char* value() 
  {
    return "718a31b14e9cb510862ca312064f3b28";
  }

  static const char* value(const cob_srvs::MoveNeck&) { return value(); } 
};

template<>
struct DataType<cob_srvs::MoveNeck> {
  static const char* value() 
  {
    return "cob_srvs/MoveNeck";
  }

  static const char* value(const cob_srvs::MoveNeck&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::MoveNeckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "718a31b14e9cb510862ca312064f3b28";
  }

  static const char* value(const cob_srvs::MoveNeckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::MoveNeckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveNeck";
  }

  static const char* value(const cob_srvs::MoveNeckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::MoveNeckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "718a31b14e9cb510862ca312064f3b28";
  }

  static const char* value(const cob_srvs::MoveNeckResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::MoveNeckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveNeck";
  }

  static const char* value(const cob_srvs::MoveNeckResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_SRVS_SERVICE_MOVENECK_H

