/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_srvs/srv/MoveCart.srv */
#ifndef COB_SRVS_SERVICE_MOVECART_H
#define COB_SRVS_SERVICE_MOVECART_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"



namespace cob_srvs
{
template <class ContainerAllocator>
struct MoveCartRequest_ : public ros::Message
{
  typedef MoveCartRequest_<ContainerAllocator> Type;

  MoveCartRequest_()
  : goal_pose()
  {
  }

  MoveCartRequest_(const ContainerAllocator& _alloc)
  : goal_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  goal_pose;


private:
  static const char* __s_getDataType_() { return "cob_srvs/MoveCartRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6815aa242b5054bf4354bc4502009b6d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "235bf6357a6a3d1742c1b14312acb4ae"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PoseStamped goal_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, goal_pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, goal_pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(goal_pose);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::MoveCartRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::MoveCartRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveCartRequest
typedef  ::cob_srvs::MoveCartRequest_<std::allocator<void> > MoveCartRequest;

typedef boost::shared_ptr< ::cob_srvs::MoveCartRequest> MoveCartRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::MoveCartRequest const> MoveCartRequestConstPtr;


template <class ContainerAllocator>
struct MoveCartResponse_ : public ros::Message
{
  typedef MoveCartResponse_<ContainerAllocator> Type;

  MoveCartResponse_()
  : return_code(0)
  {
  }

  MoveCartResponse_(const ContainerAllocator& _alloc)
  : return_code(0)
  {
  }

  typedef int32_t _return_code_type;
  int32_t return_code;


private:
  static const char* __s_getDataType_() { return "cob_srvs/MoveCartResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c285fc637ab43abc6f59f97aab55a3bb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "235bf6357a6a3d1742c1b14312acb4ae"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 return_code\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, return_code);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, return_code);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(return_code);
    return size;
  }

  typedef boost::shared_ptr< ::cob_srvs::MoveCartResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::MoveCartResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveCartResponse
typedef  ::cob_srvs::MoveCartResponse_<std::allocator<void> > MoveCartResponse;

typedef boost::shared_ptr< ::cob_srvs::MoveCartResponse> MoveCartResponsePtr;
typedef boost::shared_ptr< ::cob_srvs::MoveCartResponse const> MoveCartResponseConstPtr;

struct MoveCart
{

typedef MoveCartRequest Request;
typedef MoveCartResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveCart
} // namespace cob_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::MoveCartRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6815aa242b5054bf4354bc4502009b6d";
  }

  static const char* value(const  ::cob_srvs::MoveCartRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6815aa242b5054bfULL;
  static const uint64_t static_value2 = 0x4354bc4502009b6dULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::MoveCartRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveCartRequest";
  }

  static const char* value(const  ::cob_srvs::MoveCartRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::MoveCartRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped goal_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::MoveCartRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::MoveCartResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c285fc637ab43abc6f59f97aab55a3bb";
  }

  static const char* value(const  ::cob_srvs::MoveCartResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc285fc637ab43abcULL;
  static const uint64_t static_value2 = 0x6f59f97aab55a3bbULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::MoveCartResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveCartResponse";
  }

  static const char* value(const  ::cob_srvs::MoveCartResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::MoveCartResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 return_code\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_srvs::MoveCartResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_srvs::MoveCartResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::MoveCartRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.goal_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveCartRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_srvs::MoveCartResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.return_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveCartResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_srvs::MoveCart> {
  static const char* value() 
  {
    return "235bf6357a6a3d1742c1b14312acb4ae";
  }

  static const char* value(const cob_srvs::MoveCart&) { return value(); } 
};

template<>
struct DataType<cob_srvs::MoveCart> {
  static const char* value() 
  {
    return "cob_srvs/MoveCart";
  }

  static const char* value(const cob_srvs::MoveCart&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::MoveCartRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "235bf6357a6a3d1742c1b14312acb4ae";
  }

  static const char* value(const cob_srvs::MoveCartRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::MoveCartRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveCart";
  }

  static const char* value(const cob_srvs::MoveCartRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_srvs::MoveCartResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "235bf6357a6a3d1742c1b14312acb4ae";
  }

  static const char* value(const cob_srvs::MoveCartResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_srvs::MoveCartResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_srvs/MoveCart";
  }

  static const char* value(const cob_srvs::MoveCartResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_SRVS_SERVICE_MOVECART_H

