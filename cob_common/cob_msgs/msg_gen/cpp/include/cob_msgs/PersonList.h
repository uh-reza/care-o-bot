/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_msgs/msg/PersonList.msg */
#ifndef COB_MSGS_MESSAGE_PERSONLIST_H
#define COB_MSGS_MESSAGE_PERSONLIST_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "cob_msgs/PersonHypothesis.h"

namespace cob_msgs
{
template <class ContainerAllocator>
struct PersonList_ : public ros::Message
{
  typedef PersonList_<ContainerAllocator> Type;

  PersonList_()
  : header()
  , num_persons(0)
  , list()
  , num_associations(0)
  , association_propability()
  , ID()
  , filter_update()
  {
  }

  PersonList_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , num_persons(0)
  , list(_alloc)
  , num_associations(0)
  , association_propability(_alloc)
  , ID(_alloc)
  , filter_update(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _num_persons_type;
  uint32_t num_persons;

  typedef std::vector< ::cob_msgs::PersonHypothesis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >::other >  _list_type;
  std::vector< ::cob_msgs::PersonHypothesis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >::other >  list;

  typedef uint32_t _num_associations_type;
  uint32_t num_associations;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _association_propability_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  association_propability;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _ID_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  ID;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _filter_update_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  filter_update;


  ROS_DEPRECATED uint32_t get_list_size() const { return (uint32_t)list.size(); }
  ROS_DEPRECATED void set_list_size(uint32_t size) { list.resize((size_t)size); }
  ROS_DEPRECATED void get_list_vec(std::vector< ::cob_msgs::PersonHypothesis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >::other > & vec) const { vec = this->list; }
  ROS_DEPRECATED void set_list_vec(const std::vector< ::cob_msgs::PersonHypothesis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >::other > & vec) { this->list = vec; }
  ROS_DEPRECATED uint32_t get_association_propability_size() const { return (uint32_t)association_propability.size(); }
  ROS_DEPRECATED void set_association_propability_size(uint32_t size) { association_propability.resize((size_t)size); }
  ROS_DEPRECATED void get_association_propability_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->association_propability; }
  ROS_DEPRECATED void set_association_propability_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->association_propability = vec; }
  ROS_DEPRECATED uint32_t get_ID_size() const { return (uint32_t)ID.size(); }
  ROS_DEPRECATED void set_ID_size(uint32_t size) { ID.resize((size_t)size); }
  ROS_DEPRECATED void get_ID_vec(std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) const { vec = this->ID; }
  ROS_DEPRECATED void set_ID_vec(const std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) { this->ID = vec; }
  ROS_DEPRECATED uint32_t get_filter_update_size() const { return (uint32_t)filter_update.size(); }
  ROS_DEPRECATED void set_filter_update_size(uint32_t size) { filter_update.resize((size_t)size); }
  ROS_DEPRECATED void get_filter_update_vec(std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) const { vec = this->filter_update; }
  ROS_DEPRECATED void set_filter_update_vec(const std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) { this->filter_update = vec; }
private:
  static const char* __s_getDataType_() { return "cob_msgs/PersonList"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3824b7853ce08aa136e25272f004d5a5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
std_msgs/Header header					#  sequence ID: consecutively increasing ID \n\
						## uint32 seq\n\
						#  Two-integer timestamp that is expressed as:\n\
						#  * stamp.secs: seconds (stamp_secs) since epoch\n\
						#  * stamp.nsecs: nanoseconds since stamp_secs\n\
						#  time-handling sugar is provided by the client library\n\
						## time stamp\n\
						#  Frame this data is associated with\n\
						#  0: no frame\n\
						#  1: global frame\n\
						## string frame_id\n\
	\n\
uint32 num_persons				#  number of detected Persons\n\
PersonHypothesis[] list				#  comprised the detected persons\n\
						#\n\
\n\
uint32 num_associations				#  number of associations (number of persons currently in filter)\n\
float32[] association_propability		#\n\
\n\
uint32[] ID					#  this are the person IDs (unique identifier to associate persons with a data base - for image based recognition)\n\
\n\
uint32[] filter_update				#  this table is for the filter update. if filter_update(i)==0 -> no filter update\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: cob_msgs/PersonHypothesis\n\
\n\
\n\
# header better in PersonList.msg\n\
#std_msgs/Header header				#  sequence ID: consecutively increasing ID \n\
					## uint32 seq\n\
					#  Two-integer timestamp that is expressed as:\n\
					#  * stamp.secs: seconds (stamp_secs) since epoch\n\
					#  * stamp.nsecs: nanoseconds since stamp_secs\n\
					#  time-handling sugar is provided by the client library\n\
					## time stamp\n\
					#  Frame this data is associated with\n\
					#  0: no frame\n\
					#  1: global frame\n\
					## string frame_id\n\
\n\
\n\
############## position###########################################\n\
\n\
\n\
geometry_msgs/PoseWithCovariance position		#  Pose pose\n\
					#  Row-major representation of the 6x6 covariance matrix\n\
					#  The orientation parameters use a fixed-axis representation.\n\
					#  In order, the parameters are:\n\
					#  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
					#  float64[36] covariance\n\
\n\
geometry_msgs/TwistWithCovariance rotation 		#  This expresses velocity in free space with uncertianty.\n\
					# Row-major representation of the 6x6 covariance matrix\n\
					# The orientation parameters use a fixed-axis representation.\n\
					# In order, the parameters are:\n\
					# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
\n\
float32 p_f				#  probabillity_false = 1-w, w= probability\n\
					#  reliability of the detection\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, num_persons);
    ros::serialization::serialize(stream, list);
    ros::serialization::serialize(stream, num_associations);
    ros::serialization::serialize(stream, association_propability);
    ros::serialization::serialize(stream, ID);
    ros::serialization::serialize(stream, filter_update);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, num_persons);
    ros::serialization::deserialize(stream, list);
    ros::serialization::deserialize(stream, num_associations);
    ros::serialization::deserialize(stream, association_propability);
    ros::serialization::deserialize(stream, ID);
    ros::serialization::deserialize(stream, filter_update);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(num_persons);
    size += ros::serialization::serializationLength(list);
    size += ros::serialization::serializationLength(num_associations);
    size += ros::serialization::serializationLength(association_propability);
    size += ros::serialization::serializationLength(ID);
    size += ros::serialization::serializationLength(filter_update);
    return size;
  }

  typedef boost::shared_ptr< ::cob_msgs::PersonList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_msgs::PersonList_<ContainerAllocator>  const> ConstPtr;
}; // struct PersonList
typedef  ::cob_msgs::PersonList_<std::allocator<void> > PersonList;

typedef boost::shared_ptr< ::cob_msgs::PersonList> PersonListPtr;
typedef boost::shared_ptr< ::cob_msgs::PersonList const> PersonListConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_msgs::PersonList_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_msgs::PersonList_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_msgs::PersonList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3824b7853ce08aa136e25272f004d5a5";
  }

  static const char* value(const  ::cob_msgs::PersonList_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3824b7853ce08aa1ULL;
  static const uint64_t static_value2 = 0x36e25272f004d5a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_msgs::PersonList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_msgs/PersonList";
  }

  static const char* value(const  ::cob_msgs::PersonList_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_msgs::PersonList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
std_msgs/Header header					#  sequence ID: consecutively increasing ID \n\
						## uint32 seq\n\
						#  Two-integer timestamp that is expressed as:\n\
						#  * stamp.secs: seconds (stamp_secs) since epoch\n\
						#  * stamp.nsecs: nanoseconds since stamp_secs\n\
						#  time-handling sugar is provided by the client library\n\
						## time stamp\n\
						#  Frame this data is associated with\n\
						#  0: no frame\n\
						#  1: global frame\n\
						## string frame_id\n\
	\n\
uint32 num_persons				#  number of detected Persons\n\
PersonHypothesis[] list				#  comprised the detected persons\n\
						#\n\
\n\
uint32 num_associations				#  number of associations (number of persons currently in filter)\n\
float32[] association_propability		#\n\
\n\
uint32[] ID					#  this are the person IDs (unique identifier to associate persons with a data base - for image based recognition)\n\
\n\
uint32[] filter_update				#  this table is for the filter update. if filter_update(i)==0 -> no filter update\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: cob_msgs/PersonHypothesis\n\
\n\
\n\
# header better in PersonList.msg\n\
#std_msgs/Header header				#  sequence ID: consecutively increasing ID \n\
					## uint32 seq\n\
					#  Two-integer timestamp that is expressed as:\n\
					#  * stamp.secs: seconds (stamp_secs) since epoch\n\
					#  * stamp.nsecs: nanoseconds since stamp_secs\n\
					#  time-handling sugar is provided by the client library\n\
					## time stamp\n\
					#  Frame this data is associated with\n\
					#  0: no frame\n\
					#  1: global frame\n\
					## string frame_id\n\
\n\
\n\
############## position###########################################\n\
\n\
\n\
geometry_msgs/PoseWithCovariance position		#  Pose pose\n\
					#  Row-major representation of the 6x6 covariance matrix\n\
					#  The orientation parameters use a fixed-axis representation.\n\
					#  In order, the parameters are:\n\
					#  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
					#  float64[36] covariance\n\
\n\
geometry_msgs/TwistWithCovariance rotation 		#  This expresses velocity in free space with uncertianty.\n\
					# Row-major representation of the 6x6 covariance matrix\n\
					# The orientation parameters use a fixed-axis representation.\n\
					# In order, the parameters are:\n\
					# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
\n\
float32 p_f				#  probabillity_false = 1-w, w= probability\n\
					#  reliability of the detection\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::cob_msgs::PersonList_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_msgs::PersonList_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.num_persons);
    stream.next(m.list);
    stream.next(m.num_associations);
    stream.next(m.association_propability);
    stream.next(m.ID);
    stream.next(m.filter_update);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PersonList_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_msgs::PersonList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_msgs::PersonList_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_persons: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_persons);
    s << indent << "list[]" << std::endl;
    for (size_t i = 0; i < v.list.size(); ++i)
    {
      s << indent << "  list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >::stream(s, indent + "    ", v.list[i]);
    }
    s << indent << "num_associations: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_associations);
    s << indent << "association_propability[]" << std::endl;
    for (size_t i = 0; i < v.association_propability.size(); ++i)
    {
      s << indent << "  association_propability[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.association_propability[i]);
    }
    s << indent << "ID[]" << std::endl;
    for (size_t i = 0; i < v.ID.size(); ++i)
    {
      s << indent << "  ID[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.ID[i]);
    }
    s << indent << "filter_update[]" << std::endl;
    for (size_t i = 0; i < v.filter_update.size(); ++i)
    {
      s << indent << "  filter_update[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.filter_update[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_MSGS_MESSAGE_PERSONLIST_H

