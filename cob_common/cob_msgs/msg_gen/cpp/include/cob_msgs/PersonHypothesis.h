/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_msgs/msg/PersonHypothesis.msg */
#ifndef COB_MSGS_MESSAGE_PERSONHYPOTHESIS_H
#define COB_MSGS_MESSAGE_PERSONHYPOTHESIS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/PoseWithCovariance.h"
#include "geometry_msgs/TwistWithCovariance.h"

namespace cob_msgs
{
template <class ContainerAllocator>
struct PersonHypothesis_ : public ros::Message
{
  typedef PersonHypothesis_<ContainerAllocator> Type;

  PersonHypothesis_()
  : position()
  , rotation()
  , p_f(0.0)
  {
  }

  PersonHypothesis_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , rotation(_alloc)
  , p_f(0.0)
  {
  }

  typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _position_type;
   ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _rotation_type;
   ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  rotation;

  typedef float _p_f_type;
  float p_f;


private:
  static const char* __s_getDataType_() { return "cob_msgs/PersonHypothesis"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d8d82996742b4afe03775168cd018920"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
# header better in PersonList.msg\n\
#std_msgs/Header header				#  sequence ID: consecutively increasing ID \n\
					## uint32 seq\n\
					#  Two-integer timestamp that is expressed as:\n\
					#  * stamp.secs: seconds (stamp_secs) since epoch\n\
					#  * stamp.nsecs: nanoseconds since stamp_secs\n\
					#  time-handling sugar is provided by the client library\n\
					## time stamp\n\
					#  Frame this data is associated with\n\
					#  0: no frame\n\
					#  1: global frame\n\
					## string frame_id\n\
\n\
\n\
############## position###########################################\n\
\n\
\n\
geometry_msgs/PoseWithCovariance position		#  Pose pose\n\
					#  Row-major representation of the 6x6 covariance matrix\n\
					#  The orientation parameters use a fixed-axis representation.\n\
					#  In order, the parameters are:\n\
					#  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
					#  float64[36] covariance\n\
\n\
geometry_msgs/TwistWithCovariance rotation 		#  This expresses velocity in free space with uncertianty.\n\
					# Row-major representation of the 6x6 covariance matrix\n\
					# The orientation parameters use a fixed-axis representation.\n\
					# In order, the parameters are:\n\
					# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
\n\
float32 p_f				#  probabillity_false = 1-w, w= probability\n\
					#  reliability of the detection\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, rotation);
    ros::serialization::serialize(stream, p_f);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, rotation);
    ros::serialization::deserialize(stream, p_f);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(rotation);
    size += ros::serialization::serializationLength(p_f);
    return size;
  }

  typedef boost::shared_ptr< ::cob_msgs::PersonHypothesis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_msgs::PersonHypothesis_<ContainerAllocator>  const> ConstPtr;
}; // struct PersonHypothesis
typedef  ::cob_msgs::PersonHypothesis_<std::allocator<void> > PersonHypothesis;

typedef boost::shared_ptr< ::cob_msgs::PersonHypothesis> PersonHypothesisPtr;
typedef boost::shared_ptr< ::cob_msgs::PersonHypothesis const> PersonHypothesisConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_msgs::PersonHypothesis_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_msgs::PersonHypothesis_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8d82996742b4afe03775168cd018920";
  }

  static const char* value(const  ::cob_msgs::PersonHypothesis_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd8d82996742b4afeULL;
  static const uint64_t static_value2 = 0x03775168cd018920ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_msgs::PersonHypothesis_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_msgs/PersonHypothesis";
  }

  static const char* value(const  ::cob_msgs::PersonHypothesis_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_msgs::PersonHypothesis_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
# header better in PersonList.msg\n\
#std_msgs/Header header				#  sequence ID: consecutively increasing ID \n\
					## uint32 seq\n\
					#  Two-integer timestamp that is expressed as:\n\
					#  * stamp.secs: seconds (stamp_secs) since epoch\n\
					#  * stamp.nsecs: nanoseconds since stamp_secs\n\
					#  time-handling sugar is provided by the client library\n\
					## time stamp\n\
					#  Frame this data is associated with\n\
					#  0: no frame\n\
					#  1: global frame\n\
					## string frame_id\n\
\n\
\n\
############## position###########################################\n\
\n\
\n\
geometry_msgs/PoseWithCovariance position		#  Pose pose\n\
					#  Row-major representation of the 6x6 covariance matrix\n\
					#  The orientation parameters use a fixed-axis representation.\n\
					#  In order, the parameters are:\n\
					#  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
					#  float64[36] covariance\n\
\n\
geometry_msgs/TwistWithCovariance rotation 		#  This expresses velocity in free space with uncertianty.\n\
					# Row-major representation of the 6x6 covariance matrix\n\
					# The orientation parameters use a fixed-axis representation.\n\
					# In order, the parameters are:\n\
					# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
\n\
float32 p_f				#  probabillity_false = 1-w, w= probability\n\
					#  reliability of the detection\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::cob_msgs::PersonHypothesis_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_msgs::PersonHypothesis_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.rotation);
    stream.next(m.p_f);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PersonHypothesis_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_msgs::PersonHypothesis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_msgs::PersonHypothesis_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rotation: ";
s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
    s << indent << "p_f: ";
    Printer<float>::stream(s, indent + "  ", v.p_f);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_MSGS_MESSAGE_PERSONHYPOTHESIS_H

