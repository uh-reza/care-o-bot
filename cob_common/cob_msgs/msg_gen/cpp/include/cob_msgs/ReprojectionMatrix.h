/* Auto-generated by genmsg_cpp for file /home/reza/git/care-o-bot/cob_common/cob_msgs/msg/ReprojectionMatrix.msg */
#ifndef COB_MSGS_MESSAGE_REPROJECTIONMATRIX_H
#define COB_MSGS_MESSAGE_REPROJECTIONMATRIX_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace cob_msgs
{
template <class ContainerAllocator>
struct ReprojectionMatrix_ : public ros::Message
{
  typedef ReprojectionMatrix_<ContainerAllocator> Type;

  ReprojectionMatrix_()
  : reprojection_matrix()
  {
  }

  ReprojectionMatrix_(const ContainerAllocator& _alloc)
  : reprojection_matrix(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _reprojection_matrix_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  reprojection_matrix;


  ROS_DEPRECATED uint32_t get_reprojection_matrix_size() const { return (uint32_t)reprojection_matrix.size(); }
  ROS_DEPRECATED void set_reprojection_matrix_size(uint32_t size) { reprojection_matrix.resize((size_t)size); }
  ROS_DEPRECATED void get_reprojection_matrix_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->reprojection_matrix; }
  ROS_DEPRECATED void set_reprojection_matrix_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->reprojection_matrix = vec; }
private:
  static const char* __s_getDataType_() { return "cob_msgs/ReprojectionMatrix"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "347c3c63edb5563c79ffa1fe3c81fe8f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32[] reprojection_matrix\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, reprojection_matrix);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, reprojection_matrix);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(reprojection_matrix);
    return size;
  }

  typedef boost::shared_ptr< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator>  const> ConstPtr;
}; // struct ReprojectionMatrix
typedef  ::cob_msgs::ReprojectionMatrix_<std::allocator<void> > ReprojectionMatrix;

typedef boost::shared_ptr< ::cob_msgs::ReprojectionMatrix> ReprojectionMatrixPtr;
typedef boost::shared_ptr< ::cob_msgs::ReprojectionMatrix const> ReprojectionMatrixConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "347c3c63edb5563c79ffa1fe3c81fe8f";
  }

  static const char* value(const  ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x347c3c63edb5563cULL;
  static const uint64_t static_value2 = 0x79ffa1fe3c81fe8fULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_msgs/ReprojectionMatrix";
  }

  static const char* value(const  ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] reprojection_matrix\n\
\n\
";
  }

  static const char* value(const  ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.reprojection_matrix);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReprojectionMatrix_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_msgs::ReprojectionMatrix_<ContainerAllocator> & v) 
  {
    s << indent << "reprojection_matrix[]" << std::endl;
    for (size_t i = 0; i < v.reprojection_matrix.size(); ++i)
    {
      s << indent << "  reprojection_matrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.reprojection_matrix[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_MSGS_MESSAGE_REPROJECTIONMATRIX_H

