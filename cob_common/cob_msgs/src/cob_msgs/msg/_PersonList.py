"""autogenerated by genmsg_py from PersonList.msg. Do not edit."""
import roslib.message
import struct

import cob_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class PersonList(roslib.message.Message):
  _md5sum = "3824b7853ce08aa136e25272f004d5a5"
  _type = "cob_msgs/PersonList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
std_msgs/Header header					#  sequence ID: consecutively increasing ID 
						## uint32 seq
						#  Two-integer timestamp that is expressed as:
						#  * stamp.secs: seconds (stamp_secs) since epoch
						#  * stamp.nsecs: nanoseconds since stamp_secs
						#  time-handling sugar is provided by the client library
						## time stamp
						#  Frame this data is associated with
						#  0: no frame
						#  1: global frame
						## string frame_id
	
uint32 num_persons				#  number of detected Persons
PersonHypothesis[] list				#  comprised the detected persons
						#

uint32 num_associations				#  number of associations (number of persons currently in filter)
float32[] association_propability		#

uint32[] ID					#  this are the person IDs (unique identifier to associate persons with a data base - for image based recognition)

uint32[] filter_update				#  this table is for the filter update. if filter_update(i)==0 -> no filter update

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: cob_msgs/PersonHypothesis


# header better in PersonList.msg
#std_msgs/Header header				#  sequence ID: consecutively increasing ID 
					## uint32 seq
					#  Two-integer timestamp that is expressed as:
					#  * stamp.secs: seconds (stamp_secs) since epoch
					#  * stamp.nsecs: nanoseconds since stamp_secs
					#  time-handling sugar is provided by the client library
					## time stamp
					#  Frame this data is associated with
					#  0: no frame
					#  1: global frame
					## string frame_id


############## position###########################################


geometry_msgs/PoseWithCovariance position		#  Pose pose
					#  Row-major representation of the 6x6 covariance matrix
					#  The orientation parameters use a fixed-axis representation.
					#  In order, the parameters are:
					#  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
					#  float64[36] covariance

geometry_msgs/TwistWithCovariance rotation 		#  This expresses velocity in free space with uncertianty.
					# Row-major representation of the 6x6 covariance matrix
					# The orientation parameters use a fixed-axis representation.
					# In order, the parameters are:
					# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

float32 p_f				#  probabillity_false = 1-w, w= probability
					#  reliability of the detection



================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertianty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','num_persons','list','num_associations','association_propability','ID','filter_update']
  _slot_types = ['std_msgs/Header','uint32','cob_msgs/PersonHypothesis[]','uint32','float32[]','uint32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,num_persons,list,num_associations,association_propability,ID,filter_update
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PersonList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.num_persons is None:
        self.num_persons = 0
      if self.list is None:
        self.list = []
      if self.num_associations is None:
        self.num_associations = 0
      if self.association_propability is None:
        self.association_propability = []
      if self.ID is None:
        self.ID = []
      if self.filter_update is None:
        self.filter_update = []
    else:
      self.header = std_msgs.msg.Header()
      self.num_persons = 0
      self.list = []
      self.num_associations = 0
      self.association_propability = []
      self.ID = []
      self.filter_update = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.num_persons))
      length = len(self.list)
      buff.write(_struct_I.pack(length))
      for val1 in self.list:
        _v1 = val1.position
        _v2 = _v1.pose
        _v3 = _v2.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = _v2.orientation
        _x = _v4
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_36d.pack(*_v1.covariance))
        _v5 = val1.rotation
        _v6 = _v5.twist
        _v7 = _v6.linear
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.angular
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_36d.pack(*_v5.covariance))
        buff.write(_struct_f.pack(val1.p_f))
      buff.write(_struct_I.pack(self.num_associations))
      length = len(self.association_propability)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.association_propability))
      length = len(self.ID)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.ID))
      length = len(self.filter_update)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.filter_update))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num_persons,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list = []
      for i in xrange(0, length):
        val1 = cob_msgs.msg.PersonHypothesis()
        _v9 = val1.position
        _v10 = _v9.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v9.covariance = _struct_36d.unpack(str[start:end])
        _v13 = val1.rotation
        _v14 = _v13.twist
        _v15 = _v14.linear
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = _v14.angular
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 288
        _v13.covariance = _struct_36d.unpack(str[start:end])
        start = end
        end += 4
        (val1.p_f,) = _struct_f.unpack(str[start:end])
        self.list.append(val1)
      start = end
      end += 4
      (self.num_associations,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.association_propability = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.ID = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.filter_update = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.num_persons))
      length = len(self.list)
      buff.write(_struct_I.pack(length))
      for val1 in self.list:
        _v17 = val1.position
        _v18 = _v17.pose
        _v19 = _v18.position
        _x = _v19
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v20 = _v18.orientation
        _x = _v20
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v17.covariance.tostring())
        _v21 = val1.rotation
        _v22 = _v21.twist
        _v23 = _v22.linear
        _x = _v23
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v24 = _v22.angular
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_v21.covariance.tostring())
        buff.write(_struct_f.pack(val1.p_f))
      buff.write(_struct_I.pack(self.num_associations))
      length = len(self.association_propability)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.association_propability.tostring())
      length = len(self.ID)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.ID.tostring())
      length = len(self.filter_update)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.filter_update.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num_persons,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list = []
      for i in xrange(0, length):
        val1 = cob_msgs.msg.PersonHypothesis()
        _v25 = val1.position
        _v26 = _v25.pose
        _v27 = _v26.position
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v28 = _v26.orientation
        _x = _v28
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 288
        _v25.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v29 = val1.rotation
        _v30 = _v29.twist
        _v31 = _v30.linear
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v32 = _v30.angular
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 288
        _v29.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 4
        (val1.p_f,) = _struct_f.unpack(str[start:end])
        self.list.append(val1)
      start = end
      end += 4
      (self.num_associations,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.association_propability = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.ID = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.filter_update = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f = struct.Struct("<f")
_struct_36d = struct.Struct("<36d")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
